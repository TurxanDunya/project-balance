//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/InputSystem/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""CubeController"",
            ""id"": ""8729e72d-c523-4342-8b98-8c259b7985c0"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""0035ac43-c6ee-4ba2-a973-1da553758972"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DragAndMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0cedfabe-34b9-4fc3-9929-0d7a2e9103d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88311dde-74c2-4bb0-b588-e29408299105"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bb482bd-c401-4273-ace0-4efe2a0a8e80"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragAndMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e9cb81b-5301-4e82-9bf4-91c5fb877bf2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70b00ee0-6d7e-426a-a5a6-264274626885"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragAndMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CubeController
        m_CubeController = asset.FindActionMap("CubeController", throwIfNotFound: true);
        m_CubeController_Touch = m_CubeController.FindAction("Touch", throwIfNotFound: true);
        m_CubeController_DragAndMove = m_CubeController.FindAction("DragAndMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CubeController
    private readonly InputActionMap m_CubeController;
    private List<ICubeControllerActions> m_CubeControllerActionsCallbackInterfaces = new List<ICubeControllerActions>();
    private readonly InputAction m_CubeController_Touch;
    private readonly InputAction m_CubeController_DragAndMove;
    public struct CubeControllerActions
    {
        private @TouchControls m_Wrapper;
        public CubeControllerActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_CubeController_Touch;
        public InputAction @DragAndMove => m_Wrapper.m_CubeController_DragAndMove;
        public InputActionMap Get() { return m_Wrapper.m_CubeController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CubeControllerActions set) { return set.Get(); }
        public void AddCallbacks(ICubeControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_CubeControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CubeControllerActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @DragAndMove.started += instance.OnDragAndMove;
            @DragAndMove.performed += instance.OnDragAndMove;
            @DragAndMove.canceled += instance.OnDragAndMove;
        }

        private void UnregisterCallbacks(ICubeControllerActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @DragAndMove.started -= instance.OnDragAndMove;
            @DragAndMove.performed -= instance.OnDragAndMove;
            @DragAndMove.canceled -= instance.OnDragAndMove;
        }

        public void RemoveCallbacks(ICubeControllerActions instance)
        {
            if (m_Wrapper.m_CubeControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICubeControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_CubeControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CubeControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CubeControllerActions @CubeController => new CubeControllerActions(this);
    public interface ICubeControllerActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnDragAndMove(InputAction.CallbackContext context);
    }
}
